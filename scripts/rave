#!/bin/bash
# RAVE CLI - Management tool for RAVE development environment
# Usage: rave <command> [options]

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
VM_IMAGE="$PROJECT_ROOT/rave-dev.qcow2"

# Functions
print_usage() {
    cat << EOF
üéØ RAVE CLI - Development Environment Manager

USAGE:
    rave <command> [options]

COMMANDS:
    vm start      Start the RAVE development VM
    vm stop       Stop the RAVE development VM  
    vm status     Check VM status
    vm ssh        SSH into the running VM
    vm rebuild    Rebuild the VM from NixOS config

    cert status   Check certificate status
    cert generate Generate new development certificates
    cert real     Obtain real SSL certificates (Let's Encrypt)
    
    health        Check all services health
    logs <service> Show logs for a service
    test          Run smoke tests against the VM

EXAMPLES:
    rave vm start
    rave cert real --domain myrave.com --email me@example.com
    rave health
    rave logs nginx

For more help: rave <command> --help
EOF
}

vm_start() {
    echo -e "${BLUE}üöÄ Starting RAVE development VM...${NC}"
    
    if [ ! -f "$VM_IMAGE" ]; then
        echo -e "${RED}‚ùå VM image not found: $VM_IMAGE${NC}"
        echo -e "${YELLOW}üí° Run 'rave vm rebuild' first${NC}"
        exit 1
    fi
    
    # Check if VM is already running
    if pgrep -f "qemu-system.*$VM_IMAGE" > /dev/null; then
        echo -e "${YELLOW}‚ö†Ô∏è  VM appears to already be running${NC}"
        echo -e "${BLUE}üìä VM Status:${NC}"
        vm_status
        return 0
    fi
    
    echo -e "${BLUE}üîß Starting VM with port forwarding...${NC}"
    nohup qemu-system-x86_64 \
        -drive file="$VM_IMAGE",format=qcow2 \
        -m 4G \
        -smp 2 \
        -netdev user,id=net0,hostfwd=tcp::8081-:80,hostfwd=tcp::8889-:8080,hostfwd=tcp::2224-:22,hostfwd=tcp::8443-:443,hostfwd=tcp::8888-:8888 \
        -device virtio-net-pci,netdev=net0 \
        -nographic > /tmp/rave-vm.log 2>&1 &
    
    echo -e "${GREEN}‚úÖ VM started successfully!${NC}"
    echo -e "${BLUE}üì± Access URLs:${NC}"
    echo "  ‚Ä¢ HTTPS (with SSL): https://localhost:8443/"
    echo "  ‚Ä¢ HTTP (no SSL):    http://localhost:8888/"
    echo "  ‚Ä¢ VM Status:        http://localhost:8889/"
    echo "  ‚Ä¢ SSH Access:       ssh root@localhost -p 2224"
    echo "  ‚Ä¢ NATS Monitor:     https://localhost:8443/nats/"
    echo ""
    echo -e "${YELLOW}‚è≥ Wait 60+ seconds for all services to initialize${NC}"
}

vm_stop() {
    echo -e "${BLUE}üõë Stopping RAVE development VM...${NC}"
    
    if pkill -f "qemu-system.*$VM_IMAGE"; then
        echo -e "${GREEN}‚úÖ VM stopped successfully${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  No running VM found${NC}"
    fi
}

vm_status() {
    echo -e "${BLUE}üìä RAVE VM Status:${NC}"
    
    if pgrep -f "qemu-system.*$VM_IMAGE" > /dev/null; then
        echo -e "${GREEN}‚úÖ VM Process: Running${NC}"
        
        # Test connectivity
        if curl -s -m 5 http://localhost:8889/ > /dev/null 2>&1; then
            echo -e "${GREEN}‚úÖ VM Network: Accessible${NC}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è  VM Network: Starting up or unreachable${NC}"
        fi
        
        # Test services
        if curl -s -m 5 -k https://localhost:8443/ > /dev/null 2>&1; then
            echo -e "${GREEN}‚úÖ HTTPS Service: Running${NC}"
        else
            echo -e "${RED}‚ùå HTTPS Service: Not responding${NC}"
        fi
        
        if curl -s -m 5 http://localhost:8888/ > /dev/null 2>&1; then
            echo -e "${GREEN}‚úÖ HTTP Service: Running${NC}"
        else
            echo -e "${RED}‚ùå HTTP Service: Not responding${NC}"
        fi
        
    else
        echo -e "${RED}‚ùå VM Process: Not running${NC}"
    fi
}

vm_ssh() {
    echo -e "${BLUE}üîê Connecting to RAVE VM via SSH...${NC}"
    sshpass -p 'debug123' ssh -o "StrictHostKeyChecking=no" root@localhost -p 2224 "$@"
}

vm_rebuild() {
    echo -e "${BLUE}üèóÔ∏è  Rebuilding RAVE VM...${NC}"
    cd "$PROJECT_ROOT"
    
    echo -e "${YELLOW}‚ö†Ô∏è  Stopping existing VM...${NC}"
    vm_stop
    
    echo -e "${BLUE}üîß Building new VM image...${NC}"
    if nix build .#development; then
        echo -e "${GREEN}‚úÖ Build successful${NC}"
        
        if [ -f "$VM_IMAGE" ]; then
            echo -e "${YELLOW}üóëÔ∏è  Removing old VM image...${NC}"
            rm "$VM_IMAGE"
        fi
        
        echo -e "${BLUE}üìÅ Copying new VM image...${NC}"
        cp result/nixos.qcow2 "$VM_IMAGE"
        chmod 644 "$VM_IMAGE"
        
        echo -e "${GREEN}‚úÖ VM rebuilt successfully!${NC}"
        echo -e "${YELLOW}üí° Run 'rave vm start' to start the new VM${NC}"
    else
        echo -e "${RED}‚ùå Build failed${NC}"
        exit 1
    fi
}

cert_status() {
    echo -e "${BLUE}üîê Certificate Status:${NC}"
    
    if vm_ssh "test -f /var/lib/acme/rave.local/cert.pem"; then
        echo -e "${GREEN}‚úÖ Development certificates exist${NC}"
        
        # Get certificate info
        CERT_INFO=$(vm_ssh "openssl x509 -in /var/lib/acme/rave.local/cert.pem -noout -dates -subject" 2>/dev/null)
        echo "$CERT_INFO" | while IFS= read -r line; do
            echo "  $line"
        done
    else
        echo -e "${RED}‚ùå No development certificates found${NC}"
        echo -e "${YELLOW}üí° Run 'rave cert generate' to create them${NC}"
    fi
}

cert_generate() {
    echo -e "${BLUE}üîê Generating development certificates...${NC}"
    
    if vm_ssh "systemctl restart generate-dev-certs"; then
        echo -e "${GREEN}‚úÖ Certificates generated successfully${NC}"
        vm_ssh "systemctl restart nginx"
        echo -e "${GREEN}‚úÖ Nginx restarted${NC}"
        cert_status
    else
        echo -e "${RED}‚ùå Certificate generation failed${NC}"
        exit 1
    fi
}

cert_real() {
    local domain=""
    local email=""
    
    # Parse arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            --domain)
                domain="$2"
                shift 2
                ;;
            --email)
                email="$2"
                shift 2
                ;;
            --help)
                echo "Usage: rave cert real --domain <domain> --email <email>"
                echo ""
                echo "Obtain real SSL certificates using Let's Encrypt"
                echo ""
                echo "Options:"
                echo "  --domain DOMAIN   Domain name for certificate"
                echo "  --email EMAIL     Email for Let's Encrypt registration"
                echo ""
                echo "Example:"
                echo "  rave cert real --domain myrave.com --email admin@myrave.com"
                return 0
                ;;
            *)
                echo -e "${RED}‚ùå Unknown option: $1${NC}"
                echo "Run 'rave cert real --help' for usage"
                exit 1
                ;;
        esac
    done
    
    if [ -z "$domain" ] || [ -z "$email" ]; then
        echo -e "${RED}‚ùå Missing required options${NC}"
        echo "Usage: rave cert real --domain <domain> --email <email>"
        exit 1
    fi
    
    echo -e "${BLUE}üåê Obtaining real SSL certificate for: $domain${NC}"
    echo -e "${YELLOW}‚ö†Ô∏è  This requires the domain to point to this server${NC}"
    echo -e "${YELLOW}‚ö†Ô∏è  Port 80 and 443 must be accessible from the internet${NC}"
    
    read -p "Continue? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo "Cancelled"
        exit 0
    fi
    
    # Update VM configuration to use ACME
    echo -e "${BLUE}üîß Updating VM configuration for ACME...${NC}"
    
    # This would require rebuilding the VM with ACME settings
    echo -e "${YELLOW}üí° To use real certificates:${NC}"
    echo "1. Update nixos/configs/development.nix:"
    echo "   rave.certificates.useACME = true;"
    echo "   rave.certificates.domain = \"$domain\";"
    echo "   rave.certificates.email = \"$email\";"
    echo ""
    echo "2. Rebuild and restart the VM:"
    echo "   rave vm rebuild"
    echo "   rave vm start"
    echo ""
    echo "3. Ensure DNS points $domain to this server's public IP"
    echo "4. Ensure ports 80/443 are accessible from internet"
}

health_check() {
    echo -e "${BLUE}üè• RAVE Health Check${NC}"
    echo ""
    
    # VM Status
    vm_status
    echo ""
    
    # Service Status
    echo -e "${BLUE}üìä Service Status:${NC}"
    SERVICES=("nginx" "redis-default" "redis-gitlab" "postgresql" "nats")
    
    for service in "${SERVICES[@]}"; do
        if vm_ssh "systemctl is-active $service" >/dev/null 2>&1; then
            echo -e "${GREEN}‚úÖ $service: Active${NC}"
        else
            echo -e "${RED}‚ùå $service: Inactive${NC}"
        fi
    done
    
    echo ""
    echo -e "${BLUE}üåê Endpoint Tests:${NC}"
    
    # Test endpoints
    ENDPOINTS=(
        "http://localhost:8889/|VM Status Page"
        "http://localhost:8888/|HTTP (No SSL)" 
        "https://localhost:8443/|HTTPS (SSL)"
        "https://localhost:8443/nats/|NATS Monitor"
    )
    
    for endpoint in "${ENDPOINTS[@]}"; do
        IFS='|' read -r url desc <<< "$endpoint"
        if curl -s -m 5 -k "$url" > /dev/null 2>&1; then
            echo -e "${GREEN}‚úÖ $desc: OK${NC}"
        else
            echo -e "${RED}‚ùå $desc: Failed${NC}"
        fi
    done
}

show_logs() {
    local service="${1:-nginx}"
    echo -e "${BLUE}üìú Showing logs for: $service${NC}"
    vm_ssh "journalctl -u $service.service -f"
}

run_tests() {
    echo -e "${BLUE}üß™ Running RAVE smoke tests...${NC}"
    
    # Check if smoke test script exists
    if [ -f "$SCRIPT_DIR/spinup_smoke.sh" ]; then
        echo -e "${BLUE}üîß Running existing smoke test...${NC}"
        "$SCRIPT_DIR/spinup_smoke.sh"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Dedicated smoke test not found, running basic health check${NC}"
        health_check
    fi
}

# Main command parsing
case "${1:-}" in
    ""|"help"|"--help"|"-h")
        print_usage
        ;;
    "vm")
        case "${2:-}" in
            "start")
                vm_start
                ;;
            "stop")
                vm_stop
                ;;
            "status")
                vm_status
                ;;
            "ssh")
                shift 2
                vm_ssh "$@"
                ;;
            "rebuild")
                vm_rebuild
                ;;
            *)
                echo -e "${RED}‚ùå Unknown vm command: ${2:-}${NC}"
                echo "Available: start, stop, status, ssh, rebuild"
                exit 1
                ;;
        esac
        ;;
    "cert")
        case "${2:-}" in
            "status")
                cert_status
                ;;
            "generate")
                cert_generate
                ;;
            "real")
                shift 2
                cert_real "$@"
                ;;
            *)
                echo -e "${RED}‚ùå Unknown cert command: ${2:-}${NC}"
                echo "Available: status, generate, real"
                exit 1
                ;;
        esac
        ;;
    "health")
        health_check
        ;;
    "logs")
        show_logs "${2:-nginx}"
        ;;
    "test")
        run_tests
        ;;
    *)
        echo -e "${RED}‚ùå Unknown command: $1${NC}"
        echo ""
        print_usage
        exit 1
        ;;
esac