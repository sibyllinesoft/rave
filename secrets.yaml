# P1.2: Encrypted secrets for production RAVE deployment
# This file contains encrypted secrets managed by sops-nix
# 
# To encrypt/decrypt this file:
# 1. Generate age key: age-keygen -o ~/.config/sops/age/keys.txt
# 2. Add public key to .sops.yaml configuration
# 3. Encrypt: sops -e -i secrets.yaml
# 4. Edit: sops secrets.yaml
# 
# WARNING: Do not commit unencrypted secrets to version control!

# TLS Certificate and Private Key
# Replace with actual certificates from Let's Encrypt or internal CA
tls:
    certificate: |
        # SOPS_ENCRYPTED_PLACEHOLDER
        # This will contain the full TLS certificate chain
        # Generated from Let's Encrypt or internal CA
        # Format: PEM-encoded X.509 certificate
        -----BEGIN CERTIFICATE-----
        MIIFakeDataForPlaceholderPurposesOnlyNotRealCert...
        -----END CERTIFICATE-----
    
    private-key: |
        # SOPS_ENCRYPTED_PLACEHOLDER  
        # This will contain the TLS private key
        # Keep this extremely secure - never expose in logs or debugging
        # Format: PEM-encoded RSA/ECDSA private key
        -----BEGIN PRIVATE KEY-----
        MIIFakeDataForPlaceholderPurposesOnlyNotRealKey...
        -----END PRIVATE KEY-----

# OIDC Integration Secrets
oidc:
    # GitLab OAuth application client secret for Grafana
    client-secret: "SOPS_ENCRYPTED_PLACEHOLDER_oauth_client_secret_goes_here"
    
    # Matrix Synapse OIDC client secret (GitLab OAuth app for Matrix)
    matrix-client-secret: "SOPS_ENCRYPTED_PLACEHOLDER_matrix_oidc_client_secret"
    
    # Additional OIDC provider secrets can be added here
    # client-id: "rave-grafana"  # This can be public
    # issuer-url: "https://gitlab.example.com"  # This can be public

# GitLab Administrative Access
gitlab:
    # Root password for GitLab instance administration
    # Used for initial setup and emergency access
    root-password: "SOPS_ENCRYPTED_PLACEHOLDER_strong_gitlab_root_password"
    
    # Optional: GitLab application token for API access
    admin-token: "SOPS_ENCRYPTED_PLACEHOLDER_gitlab_admin_token"
    
    # GitLab Runner registration token
    # Generated during GitLab setup and used by runners to register
    runner-token: "SOPS_ENCRYPTED_PLACEHOLDER_gitlab_runner_registration_token"
    
    # GitLab secret key base for session encryption
    # Used for encrypting sessions, cookies, and other sensitive data
    secret-key-base: "SOPS_ENCRYPTED_PLACEHOLDER_gitlab_secret_key_base_64_chars"
    
    # Database password for GitLab PostgreSQL user
    db-password: "SOPS_ENCRYPTED_PLACEHOLDER_gitlab_postgres_password"
    
    # JWT signing key for GitLab internal authentication
    jwt-signing-key: "SOPS_ENCRYPTED_PLACEHOLDER_gitlab_jwt_signing_key"
    
    # GitLab OAuth application configuration for Matrix integration
    oauth-matrix-client-id: "SOPS_ENCRYPTED_PLACEHOLDER_matrix_oauth_client_id"
    oauth-matrix-redirect-uri: "https://rave.local:3002/matrix/_synapse/client/oidc/callback"

# Matrix (Element) Shared Secrets
matrix:
    # Matrix homeserver shared secret for user registration
    shared-secret: "SOPS_ENCRYPTED_PLACEHOLDER_matrix_shared_secret_key"
    
    # Matrix application service token (for P5 bridge integration)
    app-service-token: "SOPS_ENCRYPTED_PLACEHOLDER_matrix_app_service_token"
    
    # Matrix admin user password (for emergency access)
    admin-password: "SOPS_ENCRYPTED_PLACEHOLDER_matrix_admin_password"
    
    # Matrix homeserver signing key (generated by Synapse)
    signing-key: "SOPS_ENCRYPTED_PLACEHOLDER_matrix_signing_key"

# Webhook Security Secrets
webhook:
    # GitLab webhook secret for signature verification
    # This must match the secret configured in GitLab webhook settings
    gitlab-secret: "SOPS_ENCRYPTED_PLACEHOLDER_webhook_secret_32_chars_min"
    
    # Optional: Additional webhook secrets for other services
    github-secret: "SOPS_ENCRYPTED_PLACEHOLDER_github_webhook_secret"
    generic-secret: "SOPS_ENCRYPTED_PLACEHOLDER_generic_webhook_secret"

# Additional Application Secrets
grafana:
    # Grafana secret key for signing cookies and other cryptographic operations
    secret-key: "SOPS_ENCRYPTED_PLACEHOLDER_grafana_secret_key_32_chars"
    
    # Database password (if using external database)
    db-password: "SOPS_ENCRYPTED_PLACEHOLDER_grafana_db_password"

# Database Secrets
database:
    # PostgreSQL passwords for various services
    grafana-password: "SOPS_ENCRYPTED_PLACEHOLDER_postgres_grafana_password"
    matrix-password: "SOPS_ENCRYPTED_PLACEHOLDER_postgres_matrix_password"
    
    # Database encryption keys
    encryption-key: "SOPS_ENCRYPTED_PLACEHOLDER_db_encryption_key_64_chars"

# External Service Integration
services:
    # SMTP credentials for email notifications
    smtp-password: "SOPS_ENCRYPTED_PLACEHOLDER_smtp_password"
    
    # S3/Object storage credentials for backups
    s3-access-key: "SOPS_ENCRYPTED_PLACEHOLDER_s3_access_key"
    s3-secret-key: "SOPS_ENCRYPTED_PLACEHOLDER_s3_secret_key"
    
    # Monitoring service API keys
    prometheus-basic-auth: "SOPS_ENCRYPTED_PLACEHOLDER_prometheus_auth"

# Development and Testing Secrets (use separate files in production)
dev:
    # Test user credentials for automated testing
    test-user-password: "SOPS_ENCRYPTED_PLACEHOLDER_test_user_password"
    
    # Development database credentials
    dev-db-password: "SOPS_ENCRYPTED_PLACEHOLDER_dev_db_password"

# Backup and Recovery
backup:
    # Encryption key for backup files
    encryption-passphrase: "SOPS_ENCRYPTED_PLACEHOLDER_backup_encryption_64_chars"
    
    # Remote backup service credentials
    backup-service-token: "SOPS_ENCRYPTED_PLACEHOLDER_backup_service_token"

# Security Configuration
security:
    # JWT signing keys for internal service communication
    jwt-private-key: |
        # SOPS_ENCRYPTED_PLACEHOLDER
        # Private key for JWT signing between services
        -----BEGIN PRIVATE KEY-----
        MIIFakeDataForJWTSigningKeyPlaceholderOnly...
        -----END PRIVATE KEY-----
    
    jwt-public-key: |
        # This can be public but included here for consistency
        -----BEGIN PUBLIC KEY-----
        MIIFakeDataForJWTPublicKeyPlaceholderOnly...
        -----END PUBLIC KEY-----

# NOTES FOR PRODUCTION DEPLOYMENT:
# 
# 1. Initialize sops-nix:
#    - Generate age key: age-keygen -o ~/.config/sops/age/keys.txt
#    - Create .sops.yaml with team public keys
#    - Encrypt this file: sops -e -i secrets.yaml
# 
# 2. Replace all SOPS_ENCRYPTED_PLACEHOLDER values with actual secrets:
#    - Use strong, randomly generated passwords (32+ characters)
#    - Obtain TLS certificates from Let's Encrypt or internal CA
#    - Configure OAuth applications in GitLab/external providers
#    - Generate webhook secrets in GitLab webhook settings
# 
# 3. Security best practices:
#    - Rotate secrets regularly (quarterly minimum)
#    - Use different passwords for each service
#    - Monitor secret access in audit logs
#    - Backup age keys securely with offline storage
#    - Test secret rotation procedures regularly
# 
# 4. Team access:
#    - Add all team member age public keys to .sops.yaml
#    - Ensure secure distribution of age private keys
#    - Document secret recovery procedures
#    - Implement secret access audit trail