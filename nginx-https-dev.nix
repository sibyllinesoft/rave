# RAVE HTTPS Development Configuration with Self-Signed Certificates
# This provides a complete HTTPS setup for local development

{ lib, pkgs, config, ... }:

{
  # Import certificate generation
  imports = [ ./generate-dev-certs.nix ];

  services.nginx = {
    enable = true;
    package = pkgs.nginx;
    
    # Enhanced nginx configuration for development HTTPS
    appendConfig = ''
      # Increase worker processes for better performance
      worker_processes auto;
      
      # Optimize for development
      worker_connections 1024;
      keepalive_timeout 65;
      
      # Enable gzip compression
      gzip on;
      gzip_vary on;
      gzip_min_length 1024;
      gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
    '';

    # HTTPS Virtual Host Configuration
    virtualHosts = {
      "localhost" = {
        # HTTPS Configuration with self-signed certificates
        listen = [
          {
            addr = "0.0.0.0";
            port = 8080;
            ssl = true;
          }
          {
            addr = "0.0.0.0"; 
            port = 8081;
            ssl = false;
          }
        ];
        
        # SSL Certificate paths (generated by generate-dev-certs.nix)
        sslCertificate = "/var/lib/nginx/certs/cert.pem";
        sslCertificateKey = "/var/lib/nginx/certs/key.pem";
        
        # Modern SSL configuration for development
        extraConfig = ''
          # SSL Security Configuration
          ssl_protocols TLSv1.2 TLSv1.3;
          ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
          ssl_prefer_server_ciphers off;
          ssl_session_cache shared:SSL:10m;
          ssl_session_timeout 1d;
          
          # Development-friendly HSTS (short duration)
          add_header Strict-Transport-Security "max-age=300; includeSubDomains" always;
          
          # Security headers optimized for development
          add_header X-Content-Type-Options "nosniff" always;
          add_header X-Frame-Options "SAMEORIGIN" always;
          add_header X-XSS-Protection "1; mode=block" always;
          add_header Referrer-Policy "strict-origin-when-cross-origin" always;
          
          # Relaxed CSP for development (allows inline styles/scripts)
          add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: blob:; font-src 'self' data:; connect-src 'self' ws: wss:;" always;
        '';

        locations = {
          # Health check endpoint
          "/health" = {
            return = "200 'RAVE Demo Ready - HTTPS GitLab Access Working\\nSSL: $ssl_protocol $ssl_cipher\\nTimestamp: $time_iso8601\\n'";
            extraConfig = ''
              add_header Content-Type text/plain;
              access_log off;
            '';
          };
          
          # GitLab certificate info endpoint
          "/ssl-info" = {
            return = "200 'RAVE Development SSL Certificate\\nIssuer: RAVE Development\\nSubject: localhost\\nValid Domains: localhost, *.localhost, rave-demo, gitlab.local\\nExpires: Check certificate details in browser\\n\\nThis is a SELF-SIGNED certificate for development use only.\\n'";
            extraConfig = ''
              add_header Content-Type text/plain;
            '';
          };

          # GitLab main application
          "/" = {
            proxyPass = "http://unix:/run/gitlab/gitlab-workhorse.socket";
            extraConfig = ''
              # Proxy headers for HTTPS
              proxy_set_header Host $http_host;
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto https;
              proxy_set_header X-Forwarded-Ssl on;
              proxy_set_header X-Forwarded-Port 8080;
              
              # GitLab-specific headers  
              proxy_set_header Upgrade $http_upgrade;
              proxy_set_header Connection "upgrade";
              
              # Increase timeouts for GitLab
              proxy_connect_timeout 300s;
              proxy_send_timeout 300s;
              proxy_read_timeout 300s;
              proxy_buffering off;
              
              # Handle large uploads
              client_max_body_size 1024m;
              client_body_buffer_size 128k;
              
              # Proxy buffering
              proxy_buffer_size 4k;
              proxy_buffers 8 4k;
              proxy_busy_buffers_size 8k;
            '';
          };

          # Prometheus proxy (HTTPS)
          "/prometheus/" = {
            proxyPass = "http://127.0.0.1:9090/";
            extraConfig = ''
              proxy_set_header Host $host;
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto https;
              rewrite ^/prometheus/(.*) /$1 break;
            '';
          };
          
          # GitLab assets and API endpoints
          "~ ^/(assets|api|admin|help|profile|dashboard|projects|groups|users)/" = {
            proxyPass = "http://unix:/run/gitlab/gitlab-workhorse.socket";
            extraConfig = ''
              proxy_set_header Host $http_host;
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto https;
              proxy_set_header X-Forwarded-Ssl on;
              
              client_max_body_size 1024m;
            '';
          };
        };
      };
    };
  };

  # Ensure nginx user exists and has access to certificates
  users.users.nginx = {
    isSystemUser = true;
    group = "nginx";
  };
  
  users.groups.nginx = {};
  
  # Create nginx certificate directory with proper permissions
  systemd.tmpfiles.rules = [
    "d /var/lib/nginx 0755 nginx nginx -"
    "d /var/lib/nginx/certs 0755 nginx nginx -" 
  ];
  
  # Enhanced logging for development
  services.nginx.logError = "stderr info";
  services.nginx.appendHttpConfig = ''
    # Development-friendly logging
    log_format detailed '$remote_addr - $remote_user [$time_local] '
                       '"$request" $status $body_bytes_sent '
                       '"$http_referer" "$http_user_agent" '
                       'ssl_protocol="$ssl_protocol" ssl_cipher="$ssl_cipher"';
    
    access_log /var/log/nginx/access.log detailed;
  '';
}